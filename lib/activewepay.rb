require "activewepay/version"
require 'rubygems'
require 'uri'
require 'json'
require 'net/http'
require 'net/https'
require 'cgi'
 
module ActiveWepay
  class Base
    extend ActiveModel::Translation
     
    attr_accessor :options, :id, :oauth_token
    attr_reader :response, :errors
   
    STAGE_API_ENDPOINT = "https://stage.wepayapi.com/v2"
    STAGE_UI_ENDPOINT = "https://stage.wepay.com/v2"
  
    PRODUCTION_API_ENDPOINT = "https://wepayapi.com/v2"
    PRODUCTION_UI_ENDPOINT = "https://www.wepay.com/v2"
     
    def initialize
      @errors = ActiveModel::Errors.new(self)
      @options ||= {}
    end
     
    # make a call to the WePay API
    def call(call, access_token = false, params = false)
      if Rails.env == 'development'
        @api_endpoint = STAGE_API_ENDPOINT
        @ui_endpoint = STAGE_UI_ENDPOINT
      else
        @api_endpoint = PRODUCTION_API_ENDPOINT
        @ui_endpoint = PRODUCTION_UI_ENDPOINT
      end
         
      # get the url
      url = URI.parse(@api_endpoint + call)
      p url
      # construct the call data and access token
      call = Net::HTTP::Post.new(url.path, initheader = {'Content-Type' =>'application/json', 'User-Agent' => 'WePay Ruby SDK'})
      if params
        call.body = params.to_json
      end
      if access_token
        call.add_field('Authorization: Bearer', access_token);
      end
      # create the request object
      request = Net::HTTP.new(url.host, url.port)
      request.use_ssl = true
      # make the call
      response = request.start {|http| http.request(call) }
      # returns JSON response as ruby hash
      @response = JSON.parse(response.body, :symbolize_names => true)
  
      if @response[:error]
        @errors.add(@response[:error].to_sym, @response[:error_description])
      end
     
      self
    end
     
    def method_missing(method_name, *args, &block)
      if @response.keys.include? method_name.to_sym
        @response[method_name.to_sym]
      else 
       super
      end
    end
  end

  class Account < Base
    def self.create(oauth_token, name)
      @account = self.new
      @account.options[:oauth_token] = oauth_token

      theme = { name: 'Black and White', primary_color: 'FFFFFF', secondary_color: '000000', background_color: 'FFFFFF', button_color: 'FFFFFF' }
      @account.call('/account/create', @account.options[:oauth_token], {
        :name => name,
        :description => 'Automatically generated by Vocalem',
        :theme_object => theme 
      })
    end
  end

  class Checkout < Base
    def self.create(options = {})
      @checkout = self.new
      @checkout.options = options
      @checkout.call('/checkout/create', @checkout.options[:oauth_token], {
        account_id: @checkout.options[:account_id],
        amount: @checkout.options[:amount],
        short_description: 'Payment',
        type: 'DONATION',
        mode: 'iframe',
        app_fee: @checkout.options[:amount] * 0.021,
        redirect_uri: @checkout.options[:redirect_uri],
        callback_uri: @checkout.options[:callback_uri] 
      })
    end
  
    def self.find(id, oauth_token)
      @checkout = self.new
      @checkout.id = id
      @checkout.options[:oauth_token] = oauth_token
      @checkout.information
    end
  
    def information
      call('/checkout/', @options[:oauth_token], {
        checkout_id: @id
      })
    end
    
    def cancel
      self.call('/checkout/cancel/', @options[:oauth_token], {
        checkout_id: @id,
        cancel_reason: 'Refund'
      })
    end
  
    def refund
      call('/checkout/refund', @options[:oauth_token], {
        checkout_id: @id,
        refund_reason: 'Refunded'
      })
    end
  end

  class Preapproval < Base
    attr_accessor :options, :id
  
    def self.create(options = {})
      @recurring = self.new
      @recurring.options = options
      @recurring.call('/preapproval/create', @recurring.options[:oauth_token], {
        short_description: 'Vocalem plan change',
        account_id: @recurring.options[:account_id],
        amount: @recurring.options[:amount],
        period: 'monthly',
        redirect_uri: @recurring.options[:redirect_uri],
        callback_uri: @recurring.options[:callback_uri], 
        auto_recur: true,
        mode: 'iframe'
        }) 
    end
  
    def self.find(id, oauth_token)
      @recurring = self.new
      @recurring.options[:oauth_token] = oauth_token
      @recurring.id = id
  
      @recurring.call('/preapproval/', @recurring.options[:oauth_token], {
          preapproval_id: id
        })
    end
  
    def cancel
  
      call('/preapproval/cancel', @options[:oauth_token], {
        preapproval_id: @id
      })
    end
  end

  class Withdrawal < Base
    attr_accessor :options, :id, :oauth_token
  
    def self.create(options = {})
      @withdrawal = self.new
      @withdrawal.options = options
  
      @withdrawal.call('/withdrawal/create', @withdrawal.options[:oauth_token], {
        account_id: @withdrawal.options[:account_id],
        redirect_uri: @withdrawal.options[:redirect_uri],
        mode: 'iframe'
      })
    end
  end
end
